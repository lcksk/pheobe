/*
 * Generated by gdbus-codegen 2.32.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GENERATED_CODE_H__
#define __GENERATED_CODE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.GDBus.Multimedia.ObjectManager.Sampleplayer */

#define MULTIMEDIA_TYPE_SAMPLEPLAYER (multimedia_sampleplayer_get_type ())
#define MULTIMEDIA_SAMPLEPLAYER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER, MultimediaSampleplayer))
#define MULTIMEDIA_IS_SAMPLEPLAYER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER))
#define MULTIMEDIA_SAMPLEPLAYER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER, MultimediaSampleplayerIface))

struct _MultimediaSampleplayer;
typedef struct _MultimediaSampleplayer MultimediaSampleplayer;
typedef struct _MultimediaSampleplayerIface MultimediaSampleplayerIface;

struct _MultimediaSampleplayerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_play) (
    MultimediaSampleplayer *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_arg0);

  const gchar * (*get_state) (MultimediaSampleplayer *object);

  void (*eof) (
    MultimediaSampleplayer *object,
    gdouble arg_state);

};

GType multimedia_sampleplayer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *multimedia_sampleplayer_interface_info (void);
guint multimedia_sampleplayer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void multimedia_sampleplayer_complete_play (
    MultimediaSampleplayer *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void multimedia_sampleplayer_emit_eof (
    MultimediaSampleplayer *object,
    gdouble arg_state);



/* D-Bus method calls: */
void multimedia_sampleplayer_call_play (
    MultimediaSampleplayer *proxy,
    gboolean arg_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean multimedia_sampleplayer_call_play_finish (
    MultimediaSampleplayer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean multimedia_sampleplayer_call_play_sync (
    MultimediaSampleplayer *proxy,
    gboolean arg_arg0,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *multimedia_sampleplayer_get_state (MultimediaSampleplayer *object);
gchar *multimedia_sampleplayer_dup_state (MultimediaSampleplayer *object);
void multimedia_sampleplayer_set_state (MultimediaSampleplayer *object, const gchar *value);


/* ---- */

#define MULTIMEDIA_TYPE_SAMPLEPLAYER_PROXY (multimedia_sampleplayer_proxy_get_type ())
#define MULTIMEDIA_SAMPLEPLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER_PROXY, MultimediaSampleplayerProxy))
#define MULTIMEDIA_SAMPLEPLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MULTIMEDIA_TYPE_SAMPLEPLAYER_PROXY, MultimediaSampleplayerProxyClass))
#define MULTIMEDIA_SAMPLEPLAYER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER_PROXY, MultimediaSampleplayerProxyClass))
#define MULTIMEDIA_IS_SAMPLEPLAYER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER_PROXY))
#define MULTIMEDIA_IS_SAMPLEPLAYER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MULTIMEDIA_TYPE_SAMPLEPLAYER_PROXY))

typedef struct _MultimediaSampleplayerProxy MultimediaSampleplayerProxy;
typedef struct _MultimediaSampleplayerProxyClass MultimediaSampleplayerProxyClass;
typedef struct _MultimediaSampleplayerProxyPrivate MultimediaSampleplayerProxyPrivate;

struct _MultimediaSampleplayerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MultimediaSampleplayerProxyPrivate *priv;
};

struct _MultimediaSampleplayerProxyClass
{
  GDBusProxyClass parent_class;
};

GType multimedia_sampleplayer_proxy_get_type (void) G_GNUC_CONST;

void multimedia_sampleplayer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MultimediaSampleplayer *multimedia_sampleplayer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MultimediaSampleplayer *multimedia_sampleplayer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void multimedia_sampleplayer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MultimediaSampleplayer *multimedia_sampleplayer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MultimediaSampleplayer *multimedia_sampleplayer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define MULTIMEDIA_TYPE_SAMPLEPLAYER_SKELETON (multimedia_sampleplayer_skeleton_get_type ())
#define MULTIMEDIA_SAMPLEPLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER_SKELETON, MultimediaSampleplayerSkeleton))
#define MULTIMEDIA_SAMPLEPLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MULTIMEDIA_TYPE_SAMPLEPLAYER_SKELETON, MultimediaSampleplayerSkeletonClass))
#define MULTIMEDIA_SAMPLEPLAYER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER_SKELETON, MultimediaSampleplayerSkeletonClass))
#define MULTIMEDIA_IS_SAMPLEPLAYER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MULTIMEDIA_TYPE_SAMPLEPLAYER_SKELETON))
#define MULTIMEDIA_IS_SAMPLEPLAYER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MULTIMEDIA_TYPE_SAMPLEPLAYER_SKELETON))

typedef struct _MultimediaSampleplayerSkeleton MultimediaSampleplayerSkeleton;
typedef struct _MultimediaSampleplayerSkeletonClass MultimediaSampleplayerSkeletonClass;
typedef struct _MultimediaSampleplayerSkeletonPrivate MultimediaSampleplayerSkeletonPrivate;

struct _MultimediaSampleplayerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MultimediaSampleplayerSkeletonPrivate *priv;
};

struct _MultimediaSampleplayerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType multimedia_sampleplayer_skeleton_get_type (void) G_GNUC_CONST;

MultimediaSampleplayer *multimedia_sampleplayer_skeleton_new (void);


/* ---- */

#define MULTIMEDIA_TYPE_OBJECT (multimedia_object_get_type ())
#define MULTIMEDIA_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MULTIMEDIA_TYPE_OBJECT, MultimediaObject))
#define MULTIMEDIA_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MULTIMEDIA_TYPE_OBJECT))
#define MULTIMEDIA_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), MULTIMEDIA_TYPE_OBJECT, MultimediaObject))

struct _MultimediaObject;
typedef struct _MultimediaObject MultimediaObject;
typedef struct _MultimediaObjectIface MultimediaObjectIface;

struct _MultimediaObjectIface
{
  GTypeInterface parent_iface;
};

GType multimedia_object_get_type (void) G_GNUC_CONST;

MultimediaSampleplayer *multimedia_object_get_sampleplayer (MultimediaObject *object);
MultimediaSampleplayer *multimedia_object_peek_sampleplayer (MultimediaObject *object);

#define MULTIMEDIA_TYPE_OBJECT_PROXY (multimedia_object_proxy_get_type ())
#define MULTIMEDIA_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MULTIMEDIA_TYPE_OBJECT_PROXY, MultimediaObjectProxy))
#define MULTIMEDIA_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MULTIMEDIA_TYPE_OBJECT_PROXY, MultimediaObjectProxyClass))
#define MULTIMEDIA_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MULTIMEDIA_TYPE_OBJECT_PROXY, MultimediaObjectProxyClass))
#define MULTIMEDIA_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MULTIMEDIA_TYPE_OBJECT_PROXY))
#define MULTIMEDIA_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MULTIMEDIA_TYPE_OBJECT_PROXY))

typedef struct _MultimediaObjectProxy MultimediaObjectProxy;
typedef struct _MultimediaObjectProxyClass MultimediaObjectProxyClass;
typedef struct _MultimediaObjectProxyPrivate MultimediaObjectProxyPrivate;

struct _MultimediaObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  MultimediaObjectProxyPrivate *priv;
};

struct _MultimediaObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType multimedia_object_proxy_get_type (void) G_GNUC_CONST;
MultimediaObjectProxy *multimedia_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define MULTIMEDIA_TYPE_OBJECT_SKELETON (multimedia_object_skeleton_get_type ())
#define MULTIMEDIA_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MULTIMEDIA_TYPE_OBJECT_SKELETON, MultimediaObjectSkeleton))
#define MULTIMEDIA_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MULTIMEDIA_TYPE_OBJECT_SKELETON, MultimediaObjectSkeletonClass))
#define MULTIMEDIA_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MULTIMEDIA_TYPE_OBJECT_SKELETON, MultimediaObjectSkeletonClass))
#define MULTIMEDIA_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MULTIMEDIA_TYPE_OBJECT_SKELETON))
#define MULTIMEDIA_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MULTIMEDIA_TYPE_OBJECT_SKELETON))

typedef struct _MultimediaObjectSkeleton MultimediaObjectSkeleton;
typedef struct _MultimediaObjectSkeletonClass MultimediaObjectSkeletonClass;
typedef struct _MultimediaObjectSkeletonPrivate MultimediaObjectSkeletonPrivate;

struct _MultimediaObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  MultimediaObjectSkeletonPrivate *priv;
};

struct _MultimediaObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType multimedia_object_skeleton_get_type (void) G_GNUC_CONST;
MultimediaObjectSkeleton *multimedia_object_skeleton_new (const gchar *object_path);
void multimedia_object_skeleton_set_sampleplayer (MultimediaObjectSkeleton *object, MultimediaSampleplayer *interface_);

/* ---- */

#define MULTIMEDIA_TYPE_OBJECT_MANAGER_CLIENT (multimedia_object_manager_client_get_type ())
#define MULTIMEDIA_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), MULTIMEDIA_TYPE_OBJECT_MANAGER_CLIENT, MultimediaObjectManagerClient))
#define MULTIMEDIA_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), MULTIMEDIA_TYPE_OBJECT_MANAGER_CLIENT, MultimediaObjectManagerClientClass))
#define MULTIMEDIA_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), MULTIMEDIA_TYPE_OBJECT_MANAGER_CLIENT, MultimediaObjectManagerClientClass))
#define MULTIMEDIA_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), MULTIMEDIA_TYPE_OBJECT_MANAGER_CLIENT))
#define MULTIMEDIA_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), MULTIMEDIA_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _MultimediaObjectManagerClient MultimediaObjectManagerClient;
typedef struct _MultimediaObjectManagerClientClass MultimediaObjectManagerClientClass;
typedef struct _MultimediaObjectManagerClientPrivate MultimediaObjectManagerClientPrivate;

struct _MultimediaObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  MultimediaObjectManagerClientPrivate *priv;
};

struct _MultimediaObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType multimedia_object_manager_client_get_type (void) G_GNUC_CONST;

GType multimedia_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void multimedia_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *multimedia_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *multimedia_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void multimedia_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *multimedia_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *multimedia_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __GENERATED_CODE_H__ */
